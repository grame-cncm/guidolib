GUIDO Engine history

----------------------------------------------------------------
  version 1.6.4
- grace notes are included in the previous event mapping area
- supports complex meters with different units
- strategy changed for key change: naturals are hidden by default when the key increases or decreases in the same direction (flats or sharps). This behavior can always be overridden using the 'hideNaturals' tag parameter.
- svg device font colors management changed in order to avoid setting the color when no color is specified on gmn side.
- fix svg export viewBox size with piano roll
- fix slope issue with slurs
- new autopos attribute for dynamics (\cresc and \dim)
- fix newline issue with crescendo and diminuendo
- fix beaming issue with trills
- whole measure rests management (ignored when the meter is not set):
  rest appearance is forced to semibreve
  fix rest centering with end bar, double bar and repeat bars  
- support for \clef<"c0">
- fix grace notes beaming issue: regular beaming ignores graces notes
  they may be beamed using a dedicated \beam tag
- fix native graphic device issues
- new GuidoGetNotesDensity API. The notes density is computed on the x axis only. 
  It represents the ratio between the space occupied by the notes over each measure of each staff.
  The maximum density is retained over a single line.
- new feature to check and solve lyrics collisions, available using an extension of GuidoLayoutSettings.
  Note that solving collisions modifies the internal AR representation but changes are reverted when
  no check is required. 
- new repeat attribute for trills
- new autoLyricsPos attribute for the \set tag
- fix automatic y position for lyrics

----------------------------------------------------------------
2017-01-03  version 1.6.3
- accidentals collision detection improved, 
  it comes with a change in handling dx in \acc tag: it is now applied to the solved collision
- fix a bug with \space tag at the beginning of a slice (e.g. after a bar): space was ignored
- strategy improved for creating natural keys: when the key signature increases the current key
  no natural key is created unless the 'hideNaturals' tag parameter is set.
- key layout improved : decreases right space after a natural key
- fix dispNote issue in tuplets when value is /32 or /64
- octava tag: draw extensions lines
- new autopos attribute for lyrics: when 'on', the lyrics are placed below the bottom of
  the bounding box that includes all the notes of the staff.
- fix a bug with incorrect placement of position tags in multi-voices scores with \staff tags 
- fix appearance issue with tuplets (dispNote attribute) and durations that normally 
  required to be splitted. Support of dispNote for rests.
- various issues with clefs corrected (duplicate clefs, clef - meter inversion)
- system style for bar format is now supported by repeat bars
- new style "none" for \acc tag, intended to avoid the second accidental in case of tied notes  
- articulations support a position parameter with "above" or "below" values
- default placement of marcato change to above
- chords: better support of articulations tags 
- slurs redesigned
- autoMeasuresNum attribute of the \meter tag supports "page" value
- new GuidoGetMeter API
- new 'enclosure' parameter for \mark tag (see sample gmn files)

----------------------------------------------------------------
  version 1.6.2
- incorrect beaming corrected: 
  a beam could sometimes cross a beat,
  incorrect beam start corrected for tied notes starting off beat
- bug in Midi export corrected (velocity was always 0)
- crash bug corrected with meter<"0">, was due to new beaming strategy

----------------------------------------------------------------
  version 1.6.1
- beamed half notes support arbitrary 'empty' durations
- new \beamsFull tag introduced to allow rests in auto beaming

----------------------------------------------------------------
  version 1.6.0
- beanming half notes is allowed
- auto beaming strategy improved
- bug in mapping corrected: rests generated by split could be ignored
- new reduced simplified proportional representation
- added GuidoStream2GuidoString in GUIDOParse which return clean Gmn code from a guido stream
- empty guidostream are now translated in guido code as an empty score: "[]"
- new GUIDOScoreMap API : GuidoGetRAWStaffMap, GuidoGetRAWVoiceMap and GuidoGetRAWSystemMap which return mapping without any treatment (RAW)
- crash bug corrected (with regression-tests/ActorPreludeSample.gmn)

----------------------------------------------------------------
  version 1.5.9
- crash bug corrected with piano roll colors management

----------------------------------------------------------------
  version 1.5.8
- new function GuidoPianoRollRemoveColorToVoice for piano roll to remove color to voice.

----------------------------------------------------------------
2015-03-23  version 1.5.7
- New param 'dispNote' in \tuplet-tag, allowing to force notes appearance:
	- possible values : "/1", "/2", "/4", "/8", "/16")
	- doesn't work for chord in tuplet
- integration of GuidoLayoutSettings and GuidoPageFormat in classes. Global or static variables for this data structures are removed.
- bug fixes : 
    - cairo device : problem on fill color.
    - GDI device : remove unused character array mapping in GDI font class.
    - Tuplets : correction on automatic brackets direction
    - Compilation with visual studio 2010 and cmake > 2.8. The name of visual studio in cmake has changed, adding new condition in cmakelist.

----------------------------------------------------------------
2014-12-09  version 1.5.6
- Proportional rendering available (enabled with GuidoLayoutSettings parameters)
- \special-tag:
    - "space" param suppressed (was useless)
    - "scale" param changed for "size"
    - "color" param added
- \tuplet-tag:
    - "position" param added
    - "dx" param added
- bug fixes:
    - \staffFormat-tag + mapping:
		- staff mapping height is not null anymore when we set \staffFormat-tag "style" param to "0-line or "1-line"
		- line thickness is now taken in account in staff mapping
	- some SVG export bugs fixed
	- fix for a mapping bug in some particular cases
	- fix for a graphic bug which appeared when a non-standard notehead style was set with \noteFormat-tag
	- \units-tag: now, unit is properly reset when we remove \units-tag
	- intensity symbol "ffff" corrected in font Guido2


----------------------------------------------------------------
2014-11-7  version 1.5.5
- Fraction is now using 'long long' instead 'int' for numerator and denominator (negative dates were found with complex non-quantified scores, due to overflow)
- new timing API for performance measurements (GuidoGetParsingTime, GuidoGetAR2GRTime, GuidoGetOnDrawTime)
- performances improvement:
    - during AR2GR procedure, principally for scores containing lots of chords (time ratio until 3)
	- during drawing procedure, principally for very big scores (time ratio until 3)
- color param added for tags: \tremolo, \dotFormat, \accidental, \accolade, \bar, \doubleBar, \endBar, \repeatBegin, \repeatEnd, \daCapo, \daCapoAlFine, \dalSegno, \dalSegnoAlFine, \fine, \breathMark, \key, \octava, \staffFormat, \tempo, \tie, \tuplet, \volta
- size param added for tags: \accolade, \bar
- dx param added for tags: \bar
- dy param added for tags: \accolade, \bar
- \volta-tag :
    - display bug fixed
    - useless param 'pass' removed
	- 'm' param changed to 'mark'
- mapping bug fixed on \cluster-tag


----------------------------------------------------------------
2014-10-22  version 1.5.4
- new piano roll API available :
    - piano roll can be generated from an gmn file, an AR, etc. and exported to any classic file format
	- two piano roll types available : classic (notes are horizontal) and trajectory (notes are graphically linked to the following note)
- new 'dy' attribute for the \staffFormat-tag to insert an vertical offset
- beams can be applied to grace notes
- new 'autoMeasuresNum' attribute for the \meter-tag to display or not measures number
- \bar-tag :
    - new 'displayMeasNum' attribute to choose for each bar to display or not measure number
	- new 'numDx' / 'numDy' attribute to adjust measure number position
- huge performances improvement (to quantify : time ratio until 60 for very big scores and 8 for standard 2-pages scores)
- bugs correction
	- some SVG export bug fixed
    - conflicts with note durations in the trill solved
	- problems on dotted trills / cluster
	- bad vertical position of the flags of very low/high notes or chord
	- size param of \meter tag working properly now
	- problems on small lineThickness values in \staffFormat-tag
    - various other bugs fixed
- crashes correction :
    - when a \composer, \fingering, \label, \mark or \title tag was set under range-tag form
	- when a trill composed of a chord containing several different durations was separated into two tied trills
    - various other crashes avoided
- new tremolo tag
- grace notes :
	- they have slightly bigger spring to avoid being too close to the next note
	- the beaming is now possible


----------------------------------------------------------------
version 1.5.3
- experimental proportional notation based on AR or MIDI representation: 
  new API: GuidoAR2RProportional, GuidoMIDI2RProportional
  new tool: guido2rproportional, midi2rproportional
- support for piano roll representation based on AR or MIDI representation: 
  new API: GuidoAR2PRoll, GuidoMIDI2PRoll
  new tool: guido2proll, midi2proll
- bug in MIDI export corrected: incorrect handling of successive tied similar notes 
- infinite loop in trill computation corrected
- accidental spacing changed : a bit more space is inserted between the accidental and the note head
  to conform more to engraving practices
- incorrect coloring of trills (forced to black even when no color specified)
- bug corrected with the mappings (was introduced with comparison operator on time segments)
- improves graphic rendering of 'exotic' durations (e.g. 1/21)


----------------------------------------------------------------
2013-09-13  version 1.5.2
- improvement of \ritardando-tag and \accelerando-tag: now a dotted line is drawn and it is possible to indicate the tempo of beginning
and end (also possible to change the text style and color)
- improvement of \accol-tag : the accolade can change its style and have a range: now it can envelop the entire system or a part of it
- improvement of \meter-tag (now sums in numerator are allowed)
- new 'position' attribute for the \marcato tag
- new reentrant parser (transparent for users, not for developers)
- new stream parsing mechanism : from now, it's possible to parse a stream as it goes along, and to get intermediate AR's states
- option "Resize page to music" added in GuidoEditor settings and in Guido2Image
- \pageFormat-tag modified : from now, when horizontal / vertical margins sum is superior than width / height, they are set to 0
- new 'lineThickness' attribute for the \staffFormat-tag
- new attributes for the \tuplet-tag: 'lineThickness', 'textSize', 'bold'
- new attributes for the \cresc-tag and \decresc-tag: now it's fully customizable
- bugs correction
    - on windows, sometimes Guido crashed when user left-clicked on the score
    - dotted events (clusters, chords (vertical dot alignment and collision avoidance) and rests)
	- meter size set by user
    - now, bars (simple bar, repeatBegin, repeatEnd, double bar, finish bar) adapt their size to staff lines number and to staff size
    - some bugs fixed about SVG export
    - various bugs fixed and crashes avoided


----------------------------------------------------------------
2013-04-05  version 1.5.1
- new GuidoGetSystemCount API
- bug in midi export corrected: chord notes were ignored
- trill line added :  stops at the next element, can be drawn over several staves, systems and pages (if the notes are tied).
- implementation of new notehead types
- implementation of brackets around noteheads
- bug correction : stem length of high chords
- implementation of glissando
- implementation of cluster
- bug correction: incorrect staff mapping was generated for staves with a single slice
- implementation of \staffOff- \staffOn- tags
- implementation of \symbol-tag
- implementation of \fBeam tag (feathered beaming)
- modifications on the beams : change size with the \noteFormat changes, beams can be included in others, bugs solved...


---------------------------------------------------------------
2012-04-05  version 1.5.0
- rendering bug corrected: empty output whith empty \title tag on windows
- bug with incorrect clef displayed in a very specific context (auto clef, 
  multi-voice staff, new line forced)


----------------------------------------------------------------
2012-04-05  version 1.4.9
- bug in hex colors setting (could be not taken into account)
- crash bug catched (due to syntax error in chords duration modification)
- bug corrected: multiple repeatEnd without repeatBegin
- bug corrected with chords mapping (incorrect event date and duration)

----------------------------------------------------------------
2012-02-21  version 1.4.8
- new juce device and viewer
- tools changes:
  guido2svg options change
  guido2image options change

known issues: 
- incorrect clef displayed in a very specific case: a multi voice staff with
  no clef indication, with one voice dispatched to "g" clef and the other dispatched 
  to "f" clef: the second line may display an incorrect clef when forced with a
  \newline tag

----------------------------------------------------------------
  version 1.4.7
- supports html colors by name (extended colors keywords)
  warning: previous named color (red, green, blue and yellow) values was 200
           the corresponding html color value is 255
- new GuidoCountVoices API
- support for guido svg font added to SVG device
- GuidoSVGExport API change to for optional guido svg font support
- new mapping functions providing adjusted mappings for voices, staves and systems
- micro tonal support in free keys
- corrects crash bug with dynamic editing (supports incomplete tag params list)
- corrects incorrect accidentals rendering in multi voice staffs

----------------------------------------------------------------
2011-11-25 version 1.4.6
- memory leaks corrected
- corrects accidentals management with system bar and implicit bars
Important note to developers: 
  up to now, it was possible to release the ARHandler and GRHandler 
  (using GuidoFreeAR and GuidoFreeGR) in any order but that was a side 
  effect of memory leaks. Now, you should release them in the reverse 
  order of allocation (i.e. call GuidoFreeGR first and next GuidoFreeAR)


----------------------------------------------------------------
      version 1.4.5  (not officialy released) 
- guido font modified - new version is 3.3 (required for correct whole rest rendering)
- MIDI file export capabilities and new GuidoAR2MIDIFile API
- incorrect rendering of \alter in chords corrected
- potential crash with \acc incorrect spec corrected
- potential crash bug with \text tag corrected
- change in accidental management to cover octave changes
  and to comply to the practice described in "Behind Bars" E. Gould p. 79
- corrects a bug in tuplet display (e.g. strange vertical bar with values like [_/28 c2/16])
- corrects a scaling bug in tempo rendering (musical form was not visible)
- duration spec supports absolute time using 'ms' form (e.g. e1*1500ms). 
  The absolute time is converted to an equivalent music time assuming that a quarter note is 1000mls.
- new GuidoGetVersionStr API
- bug in xxxBeg:id xxxEnd:id parsing corrected: id was always null leading to an incorrect rendering
- new embedded svg device and new GuidoSVGExport API

----------------------------------------------------------------
2011-07-13 version 1.4.4
- factory API revised
- bench tools included but not compiled by default (actually in progress)
- GDeviceOSX change: defaults now to Quartz coordinates space unless _USE_QD_COORDINATES_
  is defined. Embedded Quartz device uses QD coordinates.
- clef change resets current accidentals (as described by Gould in "Behind bars" p.78)
- key signature lost after clef change corrected (patch by Yu Fan)
- minimum distance between staves is back to 'uncorrected' version
  the change introduced by version 1.4.1 results in incorrect mappings

----------------------------------------------------------------
2011-04-21 version 1.4.3
- \alter tag support for microtonal accidentals
- \acc tag: support for style="cautionary"
- internal restructuration (nvstring almost replaced by std::string)

----------------------------------------------------------------
2011-03-24 version 1.4.2
- slices mapping improved to become consistent along each system
- crash bug corrected: occured whith \noteFormat opened range

----------------------------------------------------------------
2011-02-11 version 1.4.1
- minimum distance between staves corrected
- correct mapping when optimal page fill is off

----------------------------------------------------------------
2010-10-06 version 1.4.0
- bug in system mapping: system dates correction
- bug in page time position corrected (GRPage)
- GDeviceWin32GDIPlus included in the library

  pending issues: incorrect mapping when optimum page fill is off

----------------------------------------------------------------
version 1.3.9
- color scheme move outside rendering (apart when forced)
- guido font extended (whole rest, 1/64 note flags, perc clef, double bar)
- dots management corrected and extended 
- note flags support up to 1/64
- parser change to support up to 3 dots
- faster score drawing for Qt
- beaming improved and corrected for stems direction changes and beaming across multiple staves
- percussion clef support (\clef<"perc">)
- barlines position adjusted to staff lines count
- \doubleBar implemented
- GuidoQtViewer becomes GuidoEditor, allowing code visualization and edition.
- \meter position corrected according to staff lines count
- "parse error line number" bug fixed.
- new API rolled time to unrolled time mapping support
- old Guido API and code removed (now unsupported)
- old mapping API and code removed and replaced with a new one
- voice number added to ARMusicalObject (for mapping purpose)

----------------------------------------------------------------
2009-08-25 (version 1.3.8) Samuel Brochot
- articulations position corrected
- new articulations added : short/long fermatas, 4 different pizzicati,  
  harmonics, staccatissimo
- ornaments implemention : mordents, turn, trill
  see gmn-examples/new-tags-v1.38 for gmn code examples

----------------------------------------------------------------
2009-03-04 version 1.3.7
- bug in \staff management corrected (ARStaff destructor)
- bug in \meter without params corrected (failure not implemented)
- bug in float parsing corrected (introduced with Qt support)

----------------------------------------------------------------
2009-01-08 version 1.3.6
- bug in volta management corrected

----------------------------------------------------------------
2008-09-12 version 1.3.5
- parsed files incorrectly closed
- library GuidoGetVersionNums corrected (incorrect result)

----------------------------------------------------------------
2008-06-17 version 1.3.4
- parser rewritten (no syntax changes)
  not supported any more:
	empty tag parameters list:          \tag<>
	unknown note name:                  i j ... z
	unknown tag name
	incorrect sequence specification:   { [ c d e ] ] } or { [ [ c d e ] }
	absolute notes duration:            was previously parsed but not handled
  behavior change:
	escape char in strings:	            '\' was used to encode "  -> \" but now stripped
- new GuidoParseString API
- incorrect slice list corrected with repeat sections.

----------------------------------------------------------------
2007-10-15 (version 1.3.3.4) Yannick Chapuis
- slur bug in debug mode corrected (kind of memory leak).
- new antialiased device available from VGSystem (mainly for Win32)
- finalization propagation when SystemDistribution is kNeverDistrib (DF)

----------------------------------------------------------------
2007-09-17 (version 1.3.3.3) Yannick Chapuis
- ExportToFile method removed from VGDevice API - external object
  created instead.

----------------------------------------------------------------
2007-09 (version 1.3.3.2) Dominique Fober
- memory leaks corrections

----------------------------------------------------------------
2007-08 (version 1.3.3.1) Dominique Fober
- VGDevice fill color management change

----------------------------------------------------------------
2005 to 2007 MISSING LOGS (version should have been incremented)

- new graphical devices system (VGDevice/VGSystem/VGFont) included 
  in library to replace GDevice obsolete management - new API
  (targets: Win32, OSX, OpenGL, Linux/Gtk, PS. Wx is obsolete)
- VGDevice Invalidate method added.

----------------------------------------------------------------
2004-10 (version 1.3.3) Dominique Fober

- default native graphic device included
- incorrect bb (double flat) symbol corrected (MacOS X only)
- incorrect ff (double forte) symbol corrected (MacOS X only)
- incorrect \noteFormat<style="x"> symbol corrected (MacOS X only)
- \noteFormat<style="noHeads"> layout corrected
- bug corrected in incorrect tag end handling (crashed with some finale exported guido 
  files with unreferenced end tags)

----------------------------------------------------------------
2004-09-15 (version 1.3.2) Dominique Fober

- Introduction of volta.
- Introductions of 'jump' tags ie:
	\daCapo
	\daCapoAlFine
	\dalSegno
	\dalSegnoAlFine
	\daCoda
	\fine
- \coda and \segno improvements: support marking strings
- general improvements of bounding boxes
- debug of \tempo marking string support

----------------------------------------------------------------
2004-08 (version 1.3.1) Dominique Fober & Jerome Berthet

* Features, bug fixes:

- Guido Engine:
	- repeat bars bug fixes.
	- Introduction of volta.


----------------------------------------------------------------
2004-06 (version 1.3.0) Dominique Fober & Jerome Berthet

* Features, bug fixes:

- Guido Engine:
	- Text aligmenent bug fixes.
	- Introduction of Coda and Segno.
	- The first system of a page does not draw above top margin.
	- New tempo tag: splitted graphical and musical informations.

- Windows NoteViewer: 
	- Fixed the adjust page-size bug in graphic export

- MacOS GuidoViewer:
	- Bitmap export (Jpeg, png...)

* Code:

- Brand new Guido Score Engine API
- Time to Graphic mapping: GUIDOScoreMap
- Updated Mac OSX, wxWidgets and Win32 applications
- Improved "bounding boxes" code.

----------------------------------------------------------------
2004-04 (version: 1.2.2)  Jerome Berthet

* Features, bug fixes:

- Guido Engine:
	- Ties and slurs: Automatic positioning.
	- Articulations (staccato, accent...): Better automatic positionning 
	- Tuplets: Automatic positioning.
	- Introduction of breath-marks.
	- More descriptive Guido Warnings messages.
	- Pre-implementation of the \accol tag. Guido can now display the 
	 	 "straightBrace" accolade.
	- Text positionning ( \text tag ) implementation closer to the Guido specifications. 
	- Introduction of Longa notes.	
	- Introduction of diamond heads.
	- Octava clefs and double treble clefs.
	- Fixed an alignement problem for beams, during Gif export.
	- Fixed the intens "ff" and "pp" bugs.
	- Improved overall speed.

- Windows NoteViewer: 
	- Fixed a bug that could cause crash after parse error.
	- Compatibility with Windows 95 / 98 restored. (to test)
	- Can export Gif files up to 3200x3200 pixels.
	- Improved Gmn text edit dialog.
	- Fixed a bug in Gif export

- MacOS  GuidoViewer:
	- Added alert boxes, can display parse error lines.
	- Fixed a text alignement bug.

* Code
	- New API entry point: GuidoGetParseErrorLine(). Allows applications
	  to know at which line of a guido gmn file a parse error has occured.
	- Sources compile faster.
	- Removed a few hundred dynamic_casts.
	- nvstring class optimization.
	- fraction class optimization.  	

----------------------------------------------------------------
2004-03 (version: 1.2.1)  Jerome Berthet 

- Color support for rests.
- Dotted rests.
- Removed a possible accent collision.

----------------------------------------------------------------
2004-01   Dev branch merged to main branch

----------------------------------------------------------------
2004-01 Jerome Berthet

- GuidoLib changes:
	- Beaming adjustement on stems seems to be better, but is still not perfect.
	- Fixed the beaming direction bug.
	- New Guido Engine entry points, renamed a few others. 
	- Reference counter mechanism for AR structures, so that several GR structure can 
	be linked to the same AR.  More flexibility for AR and GR structures manipulation. 
	See GUIDOEngine.h for more details.
	- Moved to version 1.2

- Some housekeeping in the GuidoToGif lib and app, gif export works better.

- Improved Mac Viewer: 
	- Scrollbars, resizing, zooming. 
	- Score Printing,
	- Load the musical true-type font from the application bundle.
	- Moved to version 0.11

- NoteViewer (win32)
	-Updated to match the changes related to zoom and mapping in
	the GuidoLib. It has brand new scrollbars.
	
	- The PostScript export now works. It looks for the file "guido2_font.eps"
	to use as a font file embeded in exported eps files.

	- Try to open the "guido2.ttf"  font file from the application directory
		( it is no longer stored as a resource )

	- Moved to version 0.91

----------------------------------------------------------------
2003-11-26 Jerome Berthet & Stephane Letz

Implement tempo indications. They can be of 3 types :

	- Textual only like \tempo<"Allegro"> . It will be displayed as a string.

	- BPM like \tempo<"Allegro", "1/4=120">. The string is displayed followed
	by a note and the bpm value.

	- Note equivalence like \tempo<"Allegro", "1/4=1/8">.
	The string is displayed followed by a note = another note.

Modified files : ARTempo.h, cpp, GRTempo.h,cpp

----------------------------------------------------------------
2003-11-07 Jerome Berthet

- MacOS-X multi-documents application that renders gmn files using Quartz, 
 without using the powerplant framework nor wxWindows.

- The wxWindows application "wxGuidoViewer", when compiled on Windows, now uses 
the native GDeviceWin32 graphic device. The wxWindows GDeviceWx is unable to
scale characters (i.e: the accolade), so the score rendering can be somewhat ugly.

- Introduced new VGDevices methods: DrawSymbol() and GetSymbolExtent(), that take 
a (int symbolID) as a parameter, instead of (const char * s, int inCharCount) 
strings. They are now free to map this symbolID to they want: a function call, a glyph
 from a musical font, a bitmap...

- GuidoLib do not use PrintAt() and Text-related functions anymore to display 
musical glyphs, it uses the new "Symbol" functions.
	
- Improved graphic devices classes. Common behavior and members are now 
shared among all devices classes via their VGDevice base class.

- Removed most of (all?) hard-coded Scriabin musical font character constants
from GuidoLib classes. Now, each musical symbol is defined by a MusicalSymbolID 
constant, which no longer has to match a glyph character code in a given musical Font.
Those new constants are stored in MusicalSymbols.h

- There is now 3 different methods for GRStaff to draw the staff lines:
	- The original one, that repeats drawing the staff char as many times 
	 as needed to complete the staff.
	- One that only draws one char per staff, after an appropriate scale
	  of the graphic context.
	- One that simply draws lines, with vector graphics functions.

- A new GuidoFactory API. It allows to build an abstract representation (AR)
 manually (that is, without the parser). I've split and added several functions
in GUIDOEngine.cpp, (I also did some code factorization), so it's now simpler and
easier to use and to understand.

- Every color attributes inside the GuidoLib are now coded as RGBA, where A is
the transparency (alpha) component. So it's possible, in theory, to draw 
semi-transparent or invisible symbols on the score. This feature is not (yet?) 
a part of the Guido Music Notation language specifications, so the behavior of 
Guido parsers is still undefined if they encounter a RGBA tag, instead of the 
traditional RGB one.

- Almost everything is ready, inside the Guido sources, to move coordinates
variables from long to float. Deep-internal calculations are already processed
using float values. Other coordinate-related parts of Guido now use the 
"GCoord" type, which is currently defined as a long. It will become a
float when we decide to move everything to floats.

- Sources are now cleaner and more readable. I've also added Doxygen-style comments, 
removed type conversions, removed useless #includes, replaced divisions by
multiplications equivalents, renamed class members variables with a leading 'm', 
replaced a few int by bool, removed too heavy inlines. The library compiles faster.

- The library no longer draws the white background of pages. Client applications
must draws their own background.

- New GUIDOEngine functions: GuidoUpdateGRMusic(), GuidoUpdateAllGRMusics()
- Renamed GuidoParse3() into GuidoParseFileForAR()
- Renamed GuidoGetNumPages() into GuidoPageCount()
- Renamed GuidoGetPixelSize() into GuidoConvertToDeviceUnits()
- Renamed GuidoGetVirtualSize() into GuidoConvertToVirtualUnits()

----------------------------------------------------------------
2003-07-15 Juergen Kilian

- added unicode support for .gmn files created by the Sibelius2GUIDO
  Plugin into guido.cpp. Such a unicode file will be converted into
  std. text file before parsing the content.

----------------------------------------------------------------
2003-05-09 Juergen Kilian

- added macos/applications/Guido2Midi/Guido2Midi.pbproj for
  a macos gmn2midi application
- added linux/applications/Guido2Midi/makefile for
  a linux gmn2midi application
- removed an ugly bug in Gmn2MidiParser.cpp::static short note2pcTable
- added Reload Menu Item to wxGuidoViewer

----------------------------------------------------------------
2003-05-05 Juergen Kilian

- parser didn't accept multiple tags inside chords 
[ c \tieBegin d {d \tieEnd, \tieBegin e} e \tieEnd]
- updated parser_t.c and lexy.c

----------------------------------------------------------------
2003-03-19 Jerome Berthet

- I had many problems with characters encoding between mac, windows
  and wxWindows. Currently, 10 music symbols are concerned (char 
  greater than 127). I've solved those problems with a dirty
  hack: Mac-Quartz and Mac-wxWindows versions need a FontEncodingConverter, 
  that uses Apple APIs for character encoding conversion.
- Removed callstru file. Replaced by GuidoOnDrawDesc.
- MacOS X Quartz implementation of GDevice.
- wxWindows implementation of GDevice.
- std c++ console version of GuidoFeedback (GuidoFeedbackStd.h)
- Removed some unnecessary #include, fixed some warnings under gcc.

----------------------------------------------------------------
2003-03-11 Stephane Letz <letz@grame.fr>

Doxygen based documentation of lib-score-engine abstract and graphic classes.
The Score_Engine_Doxyfile can be used to generate a documentation in HTML format. 
Doxygen can be found here : http://www.stack.nl/~dimitri/doxygen/

----------------------------------------------------------------
2003-02-20 Jerome Berthet

- GuidoOnDraw() no more draws as many score pages as it can, but
only the one given by callstruct.page.
- Clients can specify the name of text and music fonts to use.
- Simpler GDevice coordinates system.
- wxWindows implementation.

----------------------------------------------------------------
2003-02-05 Jerome Berthet

- Removed all win32 dependencies. and most of non-portable stuff. 
- Use of c++ standard headers, keywords and assert().
- Fixed some warnings on Metrowerks codewarrior compiler.
- The lib-score-engine now compiles on MacOS X.

----------------------------------------------------------------
2003-01-30 Jerome Berthet

- Definition of error codes constants. Many Guido APIs have 
changed and now return those new error codes.

- New API: int GuidoInit( GuidoInitDesc * );
It must be called at least one time before the first call of 
GuidoParse. Client applications can now provide a Graphic Device
object and a Feedback object to GuidoInit. The GuidoEngine 
will then uses those objects for all Graphic-related and user-feedback
operations. GuidoInit returns an error code.

- Guido font is no more loaded dynamically in the system, because
this is a too platform-dependant feature. Clients applications 
should now do it by themself, or ask the user to do it. This could
also be done by any GuidoLib "installers".
GuidoInit() returns an error code if the font could not be found.

- Windows-dependant code was moved from "GuidoEngine.cpp" to a new 
file "GuidoMainWin32.cpp"

- A wxWindows implementation of "GDevice" is in progress. See 
"GDeviceWx.cpp"

- Global variables "myvariable" have been renamed "gMyVariable", to
	increase code lisibility.

----------------------------------------------------------------
2003-01-21 Stephane Letz <letz@grame.fr>

 The parser code has be cleanup up in the following way:
 
 - library specific part of the guido.cpp file have been removed and moved
 in new files in the corresponding libraries (GUIDOEngine and Guido2Midi).
 The guido.cpp file should now contain only common code.
 
 - new gd_imp_init and gd_imp_exit entry points have been added in the
 guido.h file. Their purpose in to allow library implementation of the
 parser API to have  specific initialization and cleanup code.
 gd_imp_init and gd_imp_exit functions are called in the parser global
 gd_init and gd_exit entry points.
 
 - new files GUIDOEngineParser.cpp (GUIDOEngine library) and
 Gmn2MidiParser.cpp (Gmn2Midi library) have been added.
 
----------------------------------------------------------------
