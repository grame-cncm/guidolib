#
# Makefile for testing the guido engine
#
# Checking the engine output
#   the principle is the following:
#   an image target generates image files using guido2svg for a large set of gmn files
#   the validate target makes the comparison of files generated by different versions
#
# Checking memory leaks
#   requires valgrind

system	:= $(shell uname -s)
# normalizes MINGW versions
system := $(shell echo $(system) | grep MINGW > /dev/null && echo MINGW || echo $(system))

version	 ?= $(shell cat guidoversion.txt)
LEAKTOOLS = guidoparse guidoar2gr guidodraw

guido2image := guido2image
guido2svg   := guido2svg
guido2midi  := guido2midi
guido2proll := guido2proll

ifeq ($(MAKECMDGOALS), win32)
  PLATFORM := 32
  EXTENSION :=
else
  PLATFORM := 64
  EXTENSION := 64
endif  

ifeq ($(system), Darwin)
  lib =  -F../build/MacOS/Release/ -framework GUIDOEngine
else
ifeq ($(system), MINGW)
  libbin   := ../build/win$(PLATFORM)/Release
  toolbin  ?= ../src/tools/build/win$(PLATFORM)/Release
  lib       = $(libbin)/GUIDOEngine$(EXTENSION).lib
  WINTOOLS  = GUIDOEngine$(EXTENSION).dll guido2svg.exe guidoparse.exe guidoar2gr.exe guidodraw.exe # guido2image.exe guidogetstaffmap.exe guidogetsystemmap.exe guidogettimemap.exe guidogetvoicemap.exe guido2midi.exe guido2proll.exe
#  guido2image := ./guido2image.exe
  guido2svg   := ./guido2svg.exe
  guido2midi  := ./guido2midi.exe
  guido2proll := ./guido2proll.exe
  browser     := C:/Program Files (x86)/Mozilla Firefox/firefox
else
  lib = -lGUIDOEngine
endif
endif

ifdef TOOL
	TOOLPATH := $(shell basename $(TOOL))
endif

nodlost	= "definitely lost: 0"
noilost	= "indirectly lost: 0"
noplost	= "possibly lost: 0"
noerr	= "ERROR SUMMARY: 0"

gmnfiles      = $(shell find ../gmn-examples -name "*.gmn") $(shell find ../regression-tests -name "*.gmn")
gmnfilesproll = $(shell find ../regression-tests/pianoroll -name "*.gmn")
gmnfiles      = $(shell find ../gmn-examples -name "*.gmn") $(shell find ../regression-tests -name "*.gmn")
lyricsfiles   = $(shell grep -r -l "\\lyrics" ../gmn-examples ../regression-tests)


pdfout		:= $(patsubst ../%.gmn, $(version)/%.pdf, $(gmnfiles))
svgout		:= $(patsubst ../%.gmn, $(version)/%.svg, $(gmnfiles))

sysmapout	:= $(patsubst ../%.gmn, $(version)/maps/system/%.svg, $(gmnfiles))
staffmapout	:= $(patsubst ../%.gmn, $(version)/maps/staff/%.svg, $(gmnfiles))
voicemapout	:= $(patsubst ../%.gmn, $(version)/maps/voice/%.svg, $(gmnfiles))
mapsout		:= $(sysmapout) $(staffmapout) $(voicemapout)
timemapout	:= $(patsubst ../%.gmn, $(version)/maps/time/%.map, $(gmnfiles))
lyricsout	:= $(patsubst ../%.gmn, $(version)/lyrics/%.svg, $(lyricsfiles))

prollout	            := $(patsubst ../%.gmn, $(version)/proll/classic/%.svg, $(gmnfilesproll))
prollvoicescolorout     := $(patsubst ../%.gmn, $(version)/proll/classic/voicescolor/%.svg, $(gmnfilesproll))
prolltrajout            := $(patsubst ../%.gmn, $(version)/proll/trajectory/%.svg, $(gmnfilesproll))
prollvoicescolortrajout := $(patsubst ../%.gmn, $(version)/proll/trajectory/voicescolor/%.svg, $(gmnfilesproll))

leaksout 	:= $(patsubst ../%.gmn, $(version)/$(TOOLPATH)/%.leaks.txt, $(gmnfiles))
midiout     := $(patsubst ../%.gmn, $(version)/%.mid, $(gmnfiles))


allpdf 		= $(shell [ -d $(version) ] && find $(version) -name "*.pdf")
allsvg 		= $(shell [ -d $(version) ] && find $(version) -name "*.svg")
allmap 		= $(shell [ -d $(version)/maps ] && find $(version)/maps -name "*.svg")
alltimemap 	= $(shell [ -d $(version)/maps/time ] && find $(version)/maps/time -name "*.map")
allproll 	= $(shell [ -d $(version)/proll ] && find $(version)/proll -name "*.svg")
leaksfiles := $(patsubst ../%.gmn, $(version)/$(TOOLPATH)/%.leaks.out, $(gmnfiles))

validpdf 	    = $(patsubst %.pdf, %.outpdf, $(allpdf))
validsvg 	    = $(patsubst %.svg, %.outsvg, $(allsvg))
validmap 	    = $(patsubst %.svg, %.outsvg, $(allmap))
validtimemap    = $(patsubst %.map, %.outtimemap, $(alltimemap))
validproll      = $(patsubst %.svg, %.outsvg, $(allproll))

.PHONY: pdf cleantools midiclean pdfclean help

default : svg

test:
	echo $(lyricsout)

help:
	@echo "Makefile for testing the engine output. Available targets are:"
	@echo "'svg' (default): makes svg files (scores, maps, timemaps, piano roll) for a set of gmn files"
	@echo "                 the output folder name is the current guido engine version number."
	@echo "'svgshort'     : similar to 'svg' target but build the standard output only (no maps)"
	@echo "'map'          : makes svg map files for a set of gmn files"
	@echo "                 the output folder name is '[current guido engine version number]/maps/'."
	@echo "'timemap'      : makes time map files for a set of gmn files"
	@echo "                 the output folder name is '[current guido engine version number]/maps/time/'."
	@echo "'proll'        : makes svg piano roll files for a set of gmn files"
	@echo "                 the output folder name is '[current guido engine version number]/proll'."
	@echo "'pdf'          : makes pdf files for a set of gmn files"
	@echo "                 the output folder name is the current guido engine version number."
	@echo "'midi'         : makes MIDI files for a set of gmn files"
	@echo "                 the output folder name is the current guido engine version number."
	@echo "'validate    VERSION=another_version': compares the current version output (scores, map, timemap and proll files) with another one (for Windows, Firefox has to be installed (and opened) in C:/Program Files (x86)/Mozilla Firefox/firefox, otherwise please change Makefile)"
	@echo "'pdfvalidate VERSION=another_version': compares the current version pdf output with another one"
	@echo "'checkleaks TOOL=a_tool': check memory leaks on a set of gmn files using various tools"
	@echo "                 the basic tool set is included in this folder but any tool arbitrary tool could be used as well"
	@echo "'checkcrash TOOL=a_tool': run a tool with all the gmn files as arguments"
	@echo "--------------------------------"
	@echo "'svgclean'  : removes svg output"
	@echo "'pdfclean'  : removes pdf output"
	@echo "'midiclean' : removes midi files output"
	@echo "--------------------------------"
	@echo "'tools'     : build the tools"
	@echo "'win64'     : copy the tools and dll to the validate folder (64 bits version)"
	@echo "'win32'     : copy the tools and dll to the validate folder (32 bits version)"

#########################################################################
# tools to validate the graphic output, based on pdf conversion
validate: $(validsvg)
	@$(eval tmp := $(shell [ -f $(version)/ignore.$(VERSION).txt ] && echo "using $(version)/ignore.$(VERSION).txt"))	
	@echo Validating version $(version) with $(VERSION) $(tmp)
	make validtimemap
	make validproll

validsvg: $(validsvg)
	@$(eval tmp := $(shell [ -f $(version)/ignore.$(VERSION).txt ] && echo "using $(version)/ignore.$(VERSION).txt"))	
	@echo Validating version $(version) with $(VERSION) $(tmp)

validmap: $(validmap)
	@$(eval tmp := $(shell [ -f $(version)/ignore.$(VERSION).txt ] && echo "using $(version)/ignore.$(VERSION).txt"))	
	@echo Validating maps version $(version) with $(VERSION) $(tmp)

validtimemap: $(validtimemap)
	@$(eval tmp := $(shell [ -f $(version)/ignore.$(VERSION).txt ] && echo "using $(version)/ignore.$(VERSION).txt"))	
	@echo Validating time maps version $(version) with $(VERSION) $(tmp)

validproll: $(validproll)
	@$(eval tmp := $(shell [ -f $(version)/ignore.$(VERSION).txt ] && echo "using $(version)/ignore.$(VERSION).txt"))	
	@echo Validating proll version $(version) with $(VERSION) $(tmp)

pdfvalidate: $(validpdf)
	@$(eval tmp := $(shell [ -f $(version)/ignore.$(VERSION).txt ] && echo "using $(version)/ignore.$(VERSION).txt"))	
	@echo Validating version $(version) with $(VERSION) $(tmp)
	make validmap
	
#########################################################################
# rules
%.outsvg: %.svg
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< "# new file"
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
ifeq ($(system), MINGW)
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "\"$(browser)\" $(tmp) $<"; true)
else
	@[ -f  $(ignored) ] || ./diffcmd $<  $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open $< $(tmp) # to check changes"; true)
endif

%.outtimemap: %.map
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< "# new file"
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
ifeq ($(system), MINGW)
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo $< : differences found)
else
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open -t $< $(tmp) # to check changes"; true)
endif

%.outpdf: %.pdf
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< "#new file"
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open $< $(tmp) # to check changes"; true)

#########################################################################
# pdf output generation
pdf: forcepdfdate $(pdfout)
	@./forcepdfdate 20100101120000 $(pdfout)

pdfclean: 
	rm -f $(pdfout)

$(version)/%.pdf: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	$(guido2image) -b  off -f $< -o $@

#########################################################################
# midi output generation
midi:  $(midiout)

midiclean: 
	rm -f $(midiout)

$(version)/%.mid: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-$(guido2midi) $< -o $@


#########################################################################
# leaks check tools
checkleaks: $(LEAKTOOLS) $(leaksout)
	make showleaks TOOL=$(TOOL)

showleaks: $(leaksfiles)

$(version)/$(TOOLPATH)/%.leaks.txt: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	valgrind --leak-check=full --suppressions=valgrindignored.txt --log-file=$@ $(TOOL) $<
#	valgrind --leak-check=full --gen-suppressions=all --suppressions=valgrindignored.txt --log-file=$@ $(TOOL) $<

$(version)/$(TOOLPATH)/%.leaks.out: $(version)/$(TOOLPATH)/%.leaks.txt	
	@grep $(nodlost) $< > /dev/null || echo "$< : definitely lost bytes"
	@grep $(noilost) $< > /dev/null || echo "$< : indirectly lost bytes"
	@grep $(noplost) $< > /dev/null || echo "$< : possibly lost bytes"
	@grep $(noerr)   $< > /dev/null || echo "$< : errors detected"


#########################################################################
# crash tests
checkcrash: $(LEAKTOOLS)
	@$(TOOL) $(gmnfiles)


#########################################################################
# tools to generate svg files
svg: $(svgout) $(lyricsout) $(mapsout) $(timemapout) $(prollout) $(prollvoicescolorout) $(prolltrajout) $(prollvoicescolortrajout)
svgshort: $(svgout)  $(lyricsout)

svgclean: 
	rm -f $(svgout) $(mapsout) $(timemapout) $(prollout) $(prollvoicescolorout) $(prolltrajout) $(prollvoicescolortrajout)

$(version)/%.svg: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-$(guido2svg) $< | grep -v "SVG file generated using" > __tmp.svg  &&  mv __tmp.svg $@

$(version)/lyrics/%.svg: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-$(guido2svg) -checkLyrics $<  > $@


#########################################################################
# tools to generate map files
map: $(mapsout)

$(version)/maps/system/%.svg: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-$(guido2svg) -systemmap true $<  > $@

$(version)/maps/staff/%.svg: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-$(guido2svg) -staffmap true $<  > $@

$(version)/maps/voice/%.svg: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-$(guido2svg) -voicemap true $<  > $@

	
#########################################################################
# tool to generate time map files
timemap: $(timemapout)
$(version)/maps/time/%.map: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-guidogettimemap $< > $@

	
#########################################################################
# tool to generate proll files
proll: $(prollout) $(prollvoicescolorout) $(prolltrajout) $(prollvoicescolortrajout)
$(version)/proll/classic/%.svg: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-$(guido2proll) $< > $@
    
$(version)/proll/classic/voicescolor%.svg: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-$(guido2proll) -voicesautocolor true $< > $@
    
$(version)/proll/trajectory/%.svg: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-$(guido2proll) -pianoroll trajectory $< > $@
    
$(version)/proll/trajectory/voicescolor%.svg: ../%.gmn
	@[ -d $(@D) ] || mkdir -p $(@D)
	-$(guido2proll) -pianoroll trajectory -voicesautocolor true $< > $@


#########################################################################
# windows specific stuff
win64: $(WINTOOLS) GUIDOEngine64.dll 
	@which diff >/dev/null 2>&1 || (echo "### diff is not available from the command line, fix the issue before running the validate target.")

win32: $(WINTOOLS) GUIDOEngine.dll 
	@which diff >/dev/null 2>&1 || (echo "### diff is not available from the command line, fix the issue before running the validate target.")

GUIDOEngine64.dll: ../build/win64/Release/GUIDOEngine64.dll
	cp ../build/win64/Release/GUIDOEngine64.dll .

GUIDOEngine.dll: ../build/win32/Release/GUIDOEngine.dll
	cp ../build/win32/Release/GUIDOEngine.dll .

guido2svg.exe: $(toolbin)/guido2svg.exe
	cp $(toolbin)/guido2svg.exe .

guido2midi.exe: $(toolbin)/guido2midi.exe
	cp $(toolbin)/guido2midi.exe .

guidoparse.exe: $(toolbin)/guidoparse.exe
	cp $(toolbin)/guidoparse.exe .

guidoar2gr.exe: $(toolbin)/guidoar2gr.exe
	cp $(toolbin)/guidoar2gr.exe .

guidodraw.exe: $(toolbin)/guidodraw.exe
	cp $(toolbin)/guidodraw.exe .

guidogetstaffmap.exe: $(toolbin)/guidogetstaffmap.exe
	cp $(toolbin)/guidogetstaffmap.exe .

guidogetsystemmap.exe: $(toolbin)/guidogetsystemmap.exe
	cp $(toolbin)/guidogetsystemmap.exe .

guidogettimemap.exe: $(toolbin)/guidogettimemap.exe
	cp $(toolbin)/guidogettimemap.exe .

guidogetvoicemap.exe: $(toolbin)/guidogetvoicemap.exe
	cp $(toolbin)/guidogetvoicemap.exe .

guido2proll.exe: $(toolbin)/guido2proll.exe
	cp $(toolbin)/guido2proll.exe .

#guido2image.exe: ../environments/Qt/apps/guido2image/build/win64/release/guido2image.exe
#	cp ../environments/Qt/apps/guido2image/build/win64/release/guido2image.exe .

#########################################################################
# tools
SRC := ../src/engine

tools: $(LEAKTOOLS)

cleantools:
	rm -f $(LEAKTOOLS)

guidodraw : guidodraw.cpp
	$(CXX) guidodraw.cpp -I$(SRC)/include -I$(SRC)/tools $(lib) -o guidodraw

guidoar2gr : guidoar2gr.cpp
	$(CXX) guidoar2gr.cpp -I$(SRC)/include -I$(SRC)/tools $(lib) -o guidoar2gr

guidoparse : guidoparse.cpp
	$(CXX) guidoparse.cpp -I$(SRC)/include $(lib) -o guidoparse

forcepdfdate: forcepdfdate.cpp
	$(CXX) forcepdfdate.cpp -o forcepdfdate

