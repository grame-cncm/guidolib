# Makefile for testing guido2image
#
# The principle is the following:
#   an image target generates image files using guido2image for a set of gmn files
#   the validate target makes the comparison of files generated by different versions

system	:= $(shell uname -s)

ifeq ($(system), MINGW32_NT-6.1)
$(shell cp ../../../build/win32/Release/GUIDOEngine.dll .)
$(shell cp ../../../src/tools/build/win32/Release/guidogetversion.exe .)
endif

version	:= $(shell guidogetversion | cut -d' ' -f 3)
$(shell cp ../../../validate/forcepdfdate.cpp .)
gmntestfile   := ../../../gmn-examples/complex_files/846_2f.gmn
gmntestfile2  := ../../../gmn-examples/complex_files/bach.gmn
gmnteststring := "[a b c d]"


guido2image := guido2image

ifeq ($(system), Darwin)
  lib =  -F../../../build/MacOS/Release/ -framework GUIDOEngine
else
ifeq ($(system), MINGW32_NT-6.1)
  libbin  := ../../../build/win32/Release
  toolbin := ../../../src/tools/build/win32/Release
  lib       = $(libbin)/GUIDOEngine.lib
  TOOLS = GUIDOEngine.dll guidogetversion.exe guido2image.exe
else
  lib = -lGUIDOEngine
endif
endif

ifdef TOOL
	TOOLPATH := $(shell basename $(TOOL))
endif

allpng 	  = $(shell [ -d $(version)/png ] && find $(version)/png -name "*.png")
alljpeg   = $(shell [ -d $(version)/jpeg ] && find $(version)/jpeg -name "*.jpeg")
allbmp    = $(shell [ -d $(version)/bmp ] && find $(version)/bmp -name "*.bmp")
allpdf    = $(shell [ -d $(version)/pdf ] && find $(version)/pdf -name "*.pdf")
validpng  = $(patsubst %.png, %.outpng, $(allpng))
validjpeg = $(patsubst %.jpeg, %.outjpeg, $(alljpeg))
validbmp  = $(patsubst %.bmp, %.outbmp, $(allbmp))
validpdf  = $(patsubst %.pdf, %.outpdf, $(allpdf))

.PHONY: images imagesclean cleantools help png jpeg bmp pdf

default: images

help:
	@echo "Makefile for testing the guido2image tool. Available targets are:"
	@echo "'images' (default): makes images files (png, jpeg) with different parameters, for a simple gmn string '[a b c]'"
	@echo "                 the output folder name is the current guido engine version number."
	@echo "'validate    VERSION=another_version': compares the current version output with another one (for Windows, Firefox has to be installed (and opened) in C:/Program Files (x86)/Mozilla Firefox/firefox, otherwise please change Makefile)"
	@echo "--------------------------------"
	@echo "'imagesclean' : removes images output"
	@echo "--------------------------------"
	@echo "'tools'     : build the tools"
	@echo "'win32'     : copy the tools and dll to the validate folder"

#########################################################################
# tools to validate the graphic output, based on pdf conversion
validate: $(validjpeg) $(validpng) $(validbmp) $(validpdf)
	@$(eval tmp := $(shell [ -f $(version)/ignore.$(VERSION).txt ] && echo "using $(version)/ignore.$(VERSION).txt"))	
	@echo Validating version $(version) with $(VERSION) $(tmp)
	
#########################################################################
# rules
%.outpng: %.png
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
ifeq ($(system), MINGW32_NT-6.1)
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && C:/Program\ Files\ \(x86\)/Mozilla\ Firefox/firefox -new-tab $(patsubst $(version)/%, $(VERSION)/%, $<) -new-tab $<; true)
else
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open -t $< $(patsubst $(version)/%, $(VERSION)/%, $<) # to check changes"; true)
endif

%.outjpeg: %.jpeg
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
ifeq ($(system), MINGW32_NT-6.1)
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && C:/Program\ Files\ \(x86\)/Mozilla\ Firefox/firefox -new-tab $(patsubst $(version)/%, $(VERSION)/%, $<) -new-tab $<; true)
else
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open -t $< $(patsubst $(version)/%, $(VERSION)/%, $<) # to check changes"; true)
endif

%.outbmp: %.bmp
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
ifeq ($(system), MINGW32_NT-6.1)
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && C:/Program\ Files\ \(x86\)/Mozilla\ Firefox/firefox -new-tab $(patsubst $(version)/%, $(VERSION)/%, $<) -new-tab $<; true)
else
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open -t $< $(patsubst $(version)/%, $(VERSION)/%, $<) # to check changes"; true)
endif

%.outpdf: %.pdf
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
ifeq ($(system), MINGW32_NT-6.1)
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && C:/Program\ Files\ \(x86\)/Mozilla\ Firefox/firefox -new-tab $(patsubst $(version)/%, $(VERSION)/%, $<) -new-tab $<; true)
else
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open -t $< $(patsubst $(version)/%, $(VERSION)/%, $<) # to check changes"; true)
endif


#########################################################################
# tools to generate svg files
images:
	$(MAKE) png
	$(MAKE) jpeg
	$(MAKE) bmp
	$(MAKE) pdf
	
png:
	@[ -d $(version)/png ] || mkdir -p $(version)/png
	-$(guido2image) -f $(gmntestfile) -o "$(version)/png/test1.png"
	-$(guido2image) -f $(gmntestfile) -z 10 -o "$(version)/png/test2.png"
	-$(guido2image) -f $(gmntestfile) -z 10 -h 500 -o "$(version)/png/test3.png"
	-$(guido2image) -f $(gmntestfile) -w 400 -h 500 -o "$(version)/png/test4.png"
	-$(guido2image) -f $(gmntestfile) -q pianoroll -o "$(version)/png/test5.png"
	-$(guido2image) -f $(gmntestfile) -d 300 -o "$(version)/png/test6.png"
	-$(guido2image) -f $(gmntestfile) -a never -o "$(version)/png/test7.png"
	-$(guido2image) -f $(gmntestfile2) -b off -o "$(version)/png/test8.png"
	-$(guido2image) -s $(gmnteststring) -r off -o "$(version)/png/test9.png"
	-$(guido2image) -f $(gmntestfile) -c 200 -o "$(version)/png/test10.png"
	
jpeg:
	@[ -d $(version)/jpeg ] || mkdir -p $(version)/jpeg
	-$(guido2image) -f $(gmntestfile) -o "$(version)/jpeg/test1.jpeg"
	-$(guido2image) -f $(gmntestfile) -z 10 -o "$(version)/jpeg/test2.jpeg"
	-$(guido2image) -f $(gmntestfile) -z 10 -h 500 -o "$(version)/jpeg/test3.jpeg"
	-$(guido2image) -f $(gmntestfile) -w 400 -h 500 -o "$(version)/jpeg/test4.jpeg"
	-$(guido2image) -f $(gmntestfile) -q pianoroll -o "$(version)/jpeg/test5.jpeg"
	-$(guido2image) -f $(gmntestfile) -d 300 -o "$(version)/jpeg/test6.jpeg"
	-$(guido2image) -f $(gmntestfile) -a never -o "$(version)/jpeg/test7.jpeg"
	-$(guido2image) -f $(gmntestfile2) -b off -o "$(version)/jpeg/test8.jpeg"
	-$(guido2image) -s $(gmnteststring) -r off -o "$(version)/jpeg/test9.jpeg"
	-$(guido2image) -f $(gmntestfile) -c 200 -o "$(version)/jpeg/test10.jpeg"
	
bmp:
	@[ -d $(version)/bmp ] || mkdir -p $(version)/bmp
	-$(guido2image) -f $(gmntestfile) -o "$(version)/bmp/test1.bmp"
	-$(guido2image) -f $(gmntestfile) -z 10 -o "$(version)/bmp/test2.bmp"
	-$(guido2image) -f $(gmntestfile) -z 10 -h 500 -o "$(version)/bmp/test3.bmp"
	-$(guido2image) -f $(gmntestfile) -w 400 -h 500 -o "$(version)/bmp/test4.bmp"
	-$(guido2image) -f $(gmntestfile) -q pianoroll -o "$(version)/bmp/test5.bmp"
	-$(guido2image) -f $(gmntestfile) -d 300 -o "$(version)/bmp/test6.bmp"
	-$(guido2image) -f $(gmntestfile) -a never -o "$(version)/bmp/test7.bmp"
	-$(guido2image) -f $(gmntestfile2) -b off -o "$(version)/bmp/test8.bmp"
	-$(guido2image) -s $(gmnteststring) -r off -o "$(version)/bmp/test9.bmp"
	-$(guido2image) -f $(gmntestfile) -c 200 -o "$(version)/bmp/test10.bmp"
	
pdf:
	@[ -d $(version)/pdf ] || mkdir -p $(version)/pdf
	-$(guido2image) -f $(gmntestfile) -o "$(version)/pdf/test1.pdf"
	-$(guido2image) -f $(gmntestfile) -z 10 -o "$(version)/pdf/test2.pdf"
	-$(guido2image) -f $(gmntestfile) -z 10 -h 500 -o "$(version)/pdf/test3.pdf"
	-$(guido2image) -f $(gmntestfile) -w 400 -h 500 -o "$(version)/pdf/test4.pdf"
	-$(guido2image) -f $(gmntestfile) -q pianoroll -o "$(version)/pdf/test5.pdf"
	-$(guido2image) -f $(gmntestfile) -d 300 -o "$(version)/pdf/test6.pdf"
	-$(guido2image) -f $(gmntestfile) -a never -o "$(version)/pdf/test7.pdf"
	-$(guido2image) -f $(gmntestfile2) -b off -o "$(version)/pdf/test8.pdf"
	-$(guido2image) -s $(gmnteststring) -r off -o "$(version)/pdf/test9.pdf"
	-$(guido2image) -f $(gmntestfile) -c 200 -o "$(version)/pdf/test10.pdf"
	$(MAKE) forcedate

forcedate: forcepdfdate $(allpdf)
	@./forcepdfdate 20100101120000 $(allpdf)

imagesclean: 
	rm -f $(allpng) $(alljpeg) $(allbmp) $(allpdf)


#########################################################################
# windows specific stuff
win32: $(TOOLS)

GUIDOEngine.dll:
	cp $(libbin)/GUIDOEngine.dll .

guidogetversion.exe:
	cp $(toolbin)/guidogetversion.exe .

guido2image.exe:
	cp ../bin/guido2image.exe .

#########################################################################
# tools
cleantools:
	rm -f $(TOOLS)

forcepdfdate: forcepdfdate.cpp
	g++ forcepdfdate.cpp -o forcepdfdate

